typ logicna = bool
typ strTyp1 = < comp1: int, comp2: ^char >
typ strTyp2 = < comp1: { comp1: bool, comp2: char }, comp2: strTyp1 >

var extVar1: int
var extVar2: logicna
var extVar3: char
var extVar4: ^int
var extVar5: [10]int
var t : int
fun a(par0: int) : int = return 1
fun expressions() : int =
    extVar1 = 20,
    let
        var intVar1: int
        var intVar2: ^int
        var intVar3: bool
        var intVar4: [20]char
        var intVar5: [5]strTyp2
        var intVar6: strTyp1
    in
        a(1),
        extVar1 = 1,
        extVar1 = { extVar4^ : int },
        intVar1 = extVar1,

        extVar3 = 'a',
        extVar3 = '\\',
        extVar3 = '\'',
        extVar3 = '\0x61',
        extVar3 = { 97*100/extVar1 : char },

        intVar2 = null,

        intVar1 = -1,
        extVar2 = !extVar2,

        extVar2 = (true | false) != (extVar1 > intVar1),
        intVar3 = { extVar2 & true : bool },

        intVar2 = ^extVar1,
        extVar4 = intVar2,

        extVar5[1] = 1
        #extVar5[1] = { intVar6.comp2 : int },
        #extVar2 = { intVar5[2].comp1 : bool }
        #intVar5[2].comp2.comp2 = ^extVar3
    end,
    while true do 1,1 end,
    if true then 1 end

fun main() : int = 
    let
        var b : char
    in
        b = 'c',
        b = '\\',
        b = '\'',
        b = '\0x61'
    end,
    return t
    
